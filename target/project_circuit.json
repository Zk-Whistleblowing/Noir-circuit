{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"8415971665421707301","abi":{"parameters":[{"name":"id","type":{"kind":"field"},"visibility":"private"},{"name":"pw","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_path","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"index","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"root","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/7Wbh4+UVRTF3xZ63WXZ3vtSdOrujAURCyoWVCyoqIzMWlCxoGJBxYKKBRULKhZULKhYULGgYkHFgooFFaX+H4TzMnfDzeTl5Ya970t+meESTs7dc8jOzPemwOSuPeB0el4AiuixnB75rMIxq3TMqhyzasesxjGrdczqHLN6x6zBMWt0zJocs2bHrMUxa3XM2hyzdseswzHrdMy66JFffX+eTI/xSHcike2JZaPx6OxILJ1JJSOJZKY7FU1Fk6nknFgqHs+mEqmedCbdE0lHE/FstDeZjvdGctd4phXp5xXS54QD9xnLH1hvpaA4z+telkHf8/Hs+QR63vfvJoKDwMHWE81d2oVMY6JQOwpi9ucGEh5trlco1E6CbtADUmxemJdZpH9XtJz2mKzUgXLyru0zqegxrefL2dMilmtamPch4FBwGDjc0yWuVyTUngSOoJ2PDNilCtpDK6cK8q7tc5KixykmbJeKWa5ThHkfBY4Gx4BjPV3iesVC7angOHA8OCFglyppD62cKsm7ts+pih6nmbBdGsBynSbM+0RwEjgZnOLpEtcbINSeDk4Fp5nc69pQXaqiPbRyqiLv2j6nK3qcYcJ2aSDLdYYw7zPAmeAscLanS1xvoFB7JjgHnAvOC9ilatpDK6dq8q7tc6aix1kmbJcGsVxnCfM+H1wALgSzPV3ieoOE2hlwEZgDsgG7VEN7aOVUQ961fWYUPfaasF0azHLtFeZ9MbgEXAou83SJ6w0Was8Fl4MrwJUBu1RLe2jlVEvetX3OVfQ4z4Tt0hCW6zxh3leBq8E14FpPl7jeEKH2fHAduB7cELBLdbSHVk515F3b53xFjwtM2C4NZbkuEOZ9I7gJ3Axu8XSJ6w0Vai8Et4LbwO0Bu1RPe2jlVE/etX0uVPS4yITt0jCW6yJh3neAO8Fd4G5Pl7jeMKH2YnAPuBfcF7BLDbSHVk4N5F3b52JFj0tM2C4NZ7kuEeZ9P3gAPAge8nSJ6w0Xai8FD4NHwKMBu9RIe2jl1EjetX0uVfS4zITt0giW6zJh3o+Bx8ET4ElPl7jeCKH2cvAUeBo8E7BLTbSHVk5N5F3b53JFjytM2C6NZLmuEOb9LHgOPA9e8HSJ640Uaq8EL4KXwMsBu9RMe2jl1EzetX2uVPS4yoTt0iiW6yph3q+AV8Fr4HVPl7jeKKH2avAGeBO8FbBLLbSHVk4t5F3b52pFj2tM2C6NZrmuEeb9NngHvAve83SJ640Waq8F74MPwIcBu9RKe2jl1EretX2uVfS4zoTtUgnLdZ0w74/Ax+AT8KmnS1yvRKi9HnwGPgdfBOxSG+2hlVMbedf2uV7R4wYTtkulLNcNwry/BF+Br8E3ni5xvVKh9kbwLfgOfB+wS+20h1ZO7eRd2+dGRY+bTNgujWG5bhLm/QP4EfwEfvZ0ieuNEWpvBr+AX8FvAbvUQXto5dRB3rV9blb0uMWE7VIZy3WLMO/fwR/gT/CXp0tcr0yovRX8Df4B/wbsUiftoZVTJ3nX9rlV0eM2E7ZLY1mu24R5/wf+B9vBDk+XuN5YofZOsAvsNrmz+aG61EV7aOXURd7zffZXd5zizjuNbpf6shln9l8F9DMoor+359bseSN7TsTe37f3Ze39NHsfxH5+bT93tJ8X2ff59v1ZCfXI/h4ro97Y88/23Ko9b2jPidnzPfZchr2fbu+D1pvcdx8aTe67DfbzGfu+2r4fsq9j7esP+3vD/n/n3y3gvvOvfRzRf+sgMgAA","debug_symbols":"pZbRjqMwDEX/Jc88ECd2kv7KalXRlo6QEK0YGGlVzb9vKDfd6UPQijy5NvXpvdihPNSlPc0fx2643j7V4ddDncau77uPY387N1N3G2L18V2plB6nsW1jSf24HrvuzdgOkzoMc99X6qvp5+eXPu/N8IxTM8ardaXa4RJjBF67vl0+fVf/uut8K5uAZmZ5tfN7v873G5d+3Br76qf3fsr3k9EGADIkOYLJE7T2AoKmOuzR4GwyQY6zLnhDgwsuafA660LyhCDpNgS3p1/XLw+69mGPh2CSBB1sVsPWLnkCQMhld6neWoY0SbJ2F0D4NciwC8DpOFAwWYApPA/aFi+jLt9GXbqOunwfdflCbo3TUCIYzm4k1aWPN108TqLicZIpHOcW4D/HuWmj+PkiVqfni+i3af6OWXPuxrd/V0W1OvhKkV4DrcEstzFGu5z2GBm5IDrUPfKwRlOvdaORE6JB3SIHzwjqDjl4Jqx1W6+5Bc8S6tBnwbOMOvRZ8KxHHfoYPNZrnaGPwWP4Zehj8Bh+GfoYPIFfgT4BT+BXoE/AE/gV6BPwBH4d9DnwHPw66HPgOfh10OfAc/DroM+D5+HXL7zljH81Y9ec+hYvWNd5OP9435r+3NOV9EZ2H2/n9jKP7bI9z2txn/4C","file_map":{"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"50":{"source":"use dep::std::hash::poseidon2::Poseidon2::hash;\n\nglobal DEPTH: u32 = 20;\n\nfn compute_merkle_root(leaf: Field, index: [bool; 20], merkle_path: [Field; 20]) -> Field {\n    let mut current = leaf;\n    for i in 0..20 {\n        current = if index[i] {\n            hash([merkle_path[i], current], 2)\n        } else {\n            hash([current, merkle_path[i]], 2)\n        };\n    }\n    current\n}\n\nfn main(id: Field, pw: Field, merkle_path: [Field; DEPTH], index: [bool; DEPTH], root: pub Field) {\n    // leaf = Poseidon2(ID || PW)\n    let leaf = hash([id, pw], 2);\n\n    let computedRoot = compute_merkle_root(leaf, index, merkle_path);\n\n    assert(computedRoot == root);\n}\n","path":"/Users/parkssanghyeon/Desktop/web3/project_circuit/src/main.nr"}},"names":["main"],"brillig_names":[]}