{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"11740284302864760594","abi":{"parameters":[{"name":"leafIdx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"leafKey","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"leafNextIdx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"leafNextKey","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"leafValue","type":{"kind":"field"},"visibility":"private"},{"name":"root","type":{"kind":"field"},"visibility":"private"},{"name":"siblings","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"50":{"source":"global MAX_DEPTH: u32 = 32;\nuse dep::std::hash::poseidon2::Poseidon2::hash;\n\nfn verifyProof(\n    leafIdx: u32,\n    leafKey: u64,\n    leafNextIdx: u32,\n    leafNextKey: u64,\n    leafValue: Field,\n    root: Field,\n    siblings: [Field; MAX_DEPTH],\n) {\n    let mut current_hash = hash(\n        [leafKey as Field, leafNextIdx as Field, leafNextKey as Field, leafValue],\n        4,\n    );\n    let mut idx = leafIdx;\n    for i in 0..MAX_DEPTH {\n        if siblings[i] != 0 {\n            let is_right = ((idx & 1) == 0) as bool;\n            let (hash_left, hash_right) = if is_right {\n                (current_hash, siblings[i])\n            } else {\n                (siblings[i], current_hash)\n            };\n            current_hash = hash([hash_left, hash_right], 2);\n            idx >>= 1;\n        }\n    }\n    assert(current_hash == root);\n}\n\nfn verifyExclusionProof(\n    leafIdx: u32,\n    leafKey: u64,\n    leafNextIdx: u32,\n    leafNextKey: u64,\n    leafValue: Field,\n    root: Field,\n    siblings: [Field; MAX_DEPTH],\n    excludedKey: u64,\n) {\n    verifyProof(\n        leafIdx,\n        leafKey,\n        leafNextIdx,\n        leafNextKey,\n        leafValue,\n        root,\n        siblings,\n    );\n    assert(excludedKey > leafKey);\n    if leafNextIdx > 0 {\n        assert(excludedKey < leafNextKey);\n    }\n}\n\nfn verifyInsertionProof(\n    ogLeafIdx: u32,\n    ogLeafKey: u64,\n    ogLeafNextIdx: u32,\n    ogLeafNextKey: u64,\n    ogLeafValue: Field,\n    newLeafIdx: u32,\n    newLeafKey: u64,\n    newLeafValue: Field,\n    rootBefore: Field,\n    rootAfter: Field,\n    siblingsBefore: [Field; MAX_DEPTH],\n    siblingsAfterOg: [Field; MAX_DEPTH],\n    siblingsAfterNew: [Field; MAX_DEPTH],\n) {\n    // 1) All three proofs must be individually valid\n    verifyProof(\n        ogLeafIdx,\n        ogLeafKey,\n        ogLeafNextIdx,\n        ogLeafNextKey,\n        ogLeafValue,\n        rootBefore,\n        siblingsBefore,\n    );\n    verifyProof(\n        ogLeafIdx,\n        ogLeafKey,\n        newLeafIdx,\n        newLeafKey,\n        ogLeafValue,\n        rootAfter,\n        siblingsAfterOg,\n    );\n    verifyProof(\n        newLeafIdx,\n        newLeafKey,\n        ogLeafNextIdx,\n        ogLeafNextKey,\n        newLeafValue,\n        rootAfter,\n        siblingsAfterNew,\n    );\n\n    // 2) The \"after\" proofs must have equal length\n    let mut siblingsBeforeLen: u32 = MAX_DEPTH + 1;\n    let mut siblingsAfterOgLen: u32 = MAX_DEPTH + 1;\n    let mut siblingsAfterNewLen: u32 = MAX_DEPTH + 1;\n    for i in 0..MAX_DEPTH {\n        if (siblingsBeforeLen == MAX_DEPTH + 1) & (siblingsBefore[i] == 0) {\n            siblingsBeforeLen = i;\n        }\n        if (siblingsAfterOgLen == MAX_DEPTH + 1) & (siblingsAfterOg[i] == 0) {\n            siblingsAfterOgLen = i;\n        }\n        if (siblingsAfterNewLen == MAX_DEPTH + 1) & (siblingsAfterNew[i] == 0) {\n            siblingsAfterNewLen = i;\n        }\n    }\n    assert(siblingsAfterOgLen == siblingsAfterNewLen);\n    //    And the \"before\" proof's length must be either the same (no height change)\n    //    or exactly one less (height grew by 1, e.g. first insertion or crossing a power-of-two).\n    assert(\n        (siblingsBeforeLen == siblingsAfterNewLen) | (siblingsBeforeLen + 1 == siblingsAfterNewLen),\n    );\n\n    // 3) Find the first level at which the predecessor's proof changed\n    let mut diffIdx = MAX_DEPTH + 1;\n    for i in 0..MAX_DEPTH {\n        if i < siblingsAfterNewLen {\n            if (diffIdx == MAX_DEPTH + 1) & (siblingsBefore[i] != siblingsAfterOg[i]) {\n                diffIdx = i;\n            }\n        }\n    }\n    // We must see exactly one \"first\" change\n    assert(diffIdx != MAX_DEPTH + 1);\n    // And ensure nothing *before* that level changed\n    for i in 0..MAX_DEPTH {\n        if i < diffIdx {\n            assert(siblingsBefore[i] == siblingsAfterOg[i]);\n        }\n    }\n    // 4) Now recompute the \"sub-root\" of the new leaf up to diffIdx, and\n    //    check it matches the sibling that was injected into the prev-proof.\n    let mut current_hash = hash(\n        [newLeafKey as Field, ogLeafNextIdx as Field, ogLeafNextKey as Field, newLeafValue],\n        4,\n    );\n    let mut idx = newLeafIdx;\n    for i in 0..MAX_DEPTH {\n        if i < diffIdx {\n            let is_right = ((idx & 1) == 0) as bool;\n            let (hash_left, hash_right) = if is_right {\n                (current_hash, siblingsAfterNew[i])\n            } else {\n                (siblingsAfterNew[i], current_hash)\n            };\n            current_hash = hash([hash_left, hash_right], 2);\n            idx >>= 1;\n        }\n    }\n    assert(current_hash == siblingsAfterOg[diffIdx]);\n}\n\nfn main(\n    leafIdx: u32,\n    leafKey: u64,\n    leafNextIdx: u32,\n    leafNextKey: u64,\n    leafValue: Field,\n    root: Field,\n    siblings: [Field; 32],\n) {\n    verifyProof(\n        leafIdx,\n        leafKey,\n        leafNextIdx,\n        leafNextKey,\n        leafValue,\n        root,\n        siblings,\n    );\n}\n\n#[test]\nfn test_merkle_tree() {\n    verifyProof(\n        6,\n        6,\n        7,\n        7,\n        1006,\n        7420758245723695741339772407036591119149422708827218559831868837005030424306,\n        [\n            8638038457832739729317554780486517737459039859720241678260540771268785073583,\n            20875710769420856321727411154335934173213302435189610873979602997742842441139,\n            11845123360003649186639962078866747269612952657358573444480422812138068524710,\n            19163174245840510895057604832614480483787367169673967374753351720918722300633,\n            6756030518013958544030089287539615560996240983885311295876707107886417217200,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n        ],\n    );\n}\n","path":"/Users/parkssanghyeon/Desktop/web3/project_circuit/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_integer_quotient"]}